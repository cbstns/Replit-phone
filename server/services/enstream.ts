import crypto from "node:crypto";

type AccountStatus = "ACTIVE" | "SUSPENDED";
interface AccountStatusResponse {
  responseCode: number;
  responseMessage?: string;
  sourceData?: {
    accountStatus: AccountStatus;
    accountType: "POSTPAID" | "PREPAID";
    accountClass: "PERSONAL" | "BUSINESS";
    accountUser: "PRIMARY" | "SECONDARY";
    carrierName: string;
    brandName: string;
    activationDate: string;
    imei: string;
    deviceMake: string;
    deviceModel: string;
    recentServiceChangeAge: {
      deviceChangeAge: number;
      simChangeAge: number;
      phoneNumberChangeAge: number;
      accountChangeReactivationAge: number;
      accountChangeSuspensionAge: number;
      accountChangeCancellationAge: number;
    };
    recentServiceChangeFreq: {
      accountChangeReactivationFreq: number;
      accountChangeSuspensionFreq: number;
      accountChangeCancellationFreq: number;
      deviceChangeFreq: number;
      simChangeFreq: number;
      phoneNumberChangeFreq: number;
    };
  };
  integrityIndex?: number;
  accountTenure?: number;
  isTerminated?: boolean;
}

const BASE_URL = "https://qa.enstreamidentity.com/api/rest/service/v2";
const PATH = "/accountIntegrityIndex";

export async function getAccountStatusByMsisdn(params: {
  msisdn: string; // E.164 format, e.g. "+14161234567"
  username: string; // QA basic auth username
  password: string; // QA basic auth password
  serviceProviderId: string; // e.g. "8349570948"
  consentGranted?: boolean; // defaults to true
  requestId?: string; // optional, autogenerated if omitted
}): Promise<AccountStatusResponse> {
  const {
    msisdn,
    username,
    password,
    serviceProviderId,
    consentGranted = true,
  } = params;
  const requestId = params.requestId ?? crypto.randomUUID();

  const auth = Buffer.from(`${username}:${password}`).toString("base64");

  const res = await fetch(`${BASE_URL}${PATH}`, {
    method: "POST",
    headers: {
      Authorization: `Basic ${auth}`,
      "Content-Type": "application/json; charset=UTF-8",
      Accept: "application/json",
    },
    body: JSON.stringify({
      serviceProviderId,
      requestId,
      msisdn,
      consentGranted,
    }),
  });

  if (!res.ok) {
    throw new Error(`HTTP ${res.status} ${res.statusText}`);
  }

  const data = (await res.json()) as AccountStatusResponse;
  return data;
}
